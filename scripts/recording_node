#!/usr/bin/env python3
import rospy
from datetime import datetime
from std_msgs.msg import Bool
from panda_ros import Panda
from camera_feedback import Camera
import rospkg
import pickle
class Recorder:
    def __init__(self):
        rospy.init_node("recording_node")
        self._rate = rospy.Rate(20)
        self.recording = False

        rospy.Subscriber("/recording", Bool, self.recording_callback)

        self.camera = Camera()
        self.robot= Panda()

    def recording_callback(self, data: Bool):
        if data.data:
            self.init_recording()
        elif not data.data:
            self.save()


    def init_recording(self):
        self.recorded_pose = []
        self.recorded_goal = []
        self.recorded_img = []
        self.recorded_wrench = []
        self.recorded_joint = []
        self.recording = True





    def save(self, file='trajectory_data_'):
        self.recording = False
        timestamp = datetime.now().strftime("%d_%H_%M_%S")
        file += timestamp
        self.data  = {
            'pose': self.recorded_pose,
            'goal': self.recorded_goal,
            'img': self.recorded_img,
            'joint': self.recorded_joint, 
            'wrench': self.recorded_wrench
        }
        print("Saving data")
        ros_pack = rospkg.RosPack()
        self._package_path = ros_pack.get_path('trajectory_data')
        with open(self._package_path + '/recorded_trials/' + str(file) + '.pkl', 'wb') as f:
            pickle.dump(self.data, f)
        print("Data rollout saved")

    def run(self):
        while not rospy.is_shutdown():
            if self.recording:
                self.recorded_pose.append(self.robot.curr_pose)
                self.recorded_goal.append(self.robot.goal_pose)


                #self.recorded_img.append(self.camera.curr_image)
                self.recorded_img.append(None)
                self.recorded_joint.append(self.robot.curr_joint) 
                self.recorded_wrench.append(self.robot.curr_wrench)
            self._rate.sleep()


if __name__ == "__main__":
    node = Recorder()
    try:
        node.run()
    except rospy.ROSInterruptException:
        pass
