#!/usr/bin/env python3
import rospy
from datetime import datetime
from std_msgs.msg import Bool
from sensor_msgs.msg import CompressedImage
from panda_ros import Panda
from cv_bridge import CvBridgeError, CvBridge
import rospkg
import pickle
import cv2
class Recorder:
    def __init__(self):
        rospy.init_node("recording_node")
        self._rate = rospy.Rate(20)
        self.recording = False
        self._cv_bridge = CvBridge()

        rospy.Subscriber("/recording", Bool, self.recording_callback)
        self.image_sub = rospy.Subscriber('/camera/color/image_raw/compressed', CompressedImage, self.image_callback)

        self.robot= Panda()

    def image_callback(self, msg: CompressedImage):
        try:
            self.curr_image = self._cv_bridge.compressed_imgmsg_to_cv2(msg)
        except CvBridgeError as e:
            print(e)

    def recording_callback(self, data: Bool):
        if data.data:
            self.init_recording()
        elif not data.data:
            self.save()


    def init_recording(self):
        self.recorded_pose = []
        self.recorded_goal = []
        self.recorded_img = []
        self.recorded_wrench = []
        self.recorded_joint = []
        self.recording = True





    def save(self, file='trajectory_data_'):
        self.recording = False
        timestamp = datetime.now().strftime("%d_%H_%M_%S")
        file += timestamp
        self.data  = {
            'pose': self.recorded_pose,
            'goal': self.recorded_goal,
            #'img': self.recorded_img,
            'joint': self.recorded_joint, 
            'wrench': self.recorded_wrench
        }
        ros_pack = rospkg.RosPack()
        self._package_path = ros_pack.get_path('trajectory_data')
        with open(self._package_path + '/recorded_trials/' + str(file) + '.pkl', 'wb') as f:
            pickle.dump(self.data, f)

        # save images in folder
        for i, img in enumerate(self.recorded_img):
            cv2.imwrite(self._package_path + '/recorded_trials/' + str(file) + '_img_' + str(i) + '.jpg',




        print("Data rollout saved")

    def run(self):
        while not rospy.is_shutdown():
            if self.recording:
                self.recorded_pose.append(self.robot.curr_pose)
                self.recorded_goal.append(self.robot.goal_pose)


                self.recorded_img.append(self.curr_image)
                self.recorded_joint.append(self.robot.curr_joint) 
                self.recorded_wrench.append(self.robot.curr_wrench)
            self._rate.sleep()


if __name__ == "__main__":
    node = Recorder()
    try:
        node.run()
    except rospy.ROSInterruptException:
        pass
