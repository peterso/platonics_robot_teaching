#!/usr/bin/env python3
import rospy
import rospkg
import actionlib
from lfd import LfD
import dynamic_reconfigure.client
import yaml
from std_msgs.msg import Float32MultiArray, String
import numpy as np
import quaternion

from skills_manager.msg import LfdRecordAction, LfdRecordGoal, LfdRecordResult, LfdRecordFeedback
from skills_manager.msg import LfdExecuteSkillAction, LfdExecuteSkillGoal, LfdExecuteSkillResult, LfdExecuteSkillFeedback
from platonics_vision.msg import SolveSliderGoal, SolveSliderAction
from skills_manager.msg import LfdExecuteSequenceAction, LfdExecuteSequenceGoal, LfdExecuteSequenceResult, LfdExecuteSequenceFeedback
from skills_manager.msg import LfdHomeAction, LfdHomeGoal, LfdHomeResult, LfdHomeFeedback
from skills_manager.msg import AbortGripperAction, AbortGripperGoal, AbortGripperResult, AbortGripperFeedback
from skills_manager.msg import LfdExecuteSkillSequenceAction, LfdExecuteSkillSequenceGoal, LfdExecuteSkillSequenceResult, LfdExecuteSkillSequenceFeedback
from skills_manager.srv import ListTrajectories, ListTrajectoriesRequest, ListTrajectoriesResponse, ListTemplates, ListTemplatesRequest, ListTemplatesResponse, ListSkills, ListSkillsRequest, ListSkillsResponse
from platonics_vision.srv import IterativeRegistrationLocalizer, IterativeRegistrationLocalizerRequest, IterativeRegistrationLocalizerResponse
from platonics_vision.srv import MultiSiftRegistrationLocalizer, MultiSiftRegistrationLocalizerRequest, MultiSiftRegistrationLocalizerResponse

from panda_ros.pose_transform_functions import pose_2_transformation
from geometry_msgs.msg import PoseStamped

NB_ITERATIVE_STEPS = 3

class LfDServer():
    def __init__(self):
        rospy.init_node("learning_node")
        self._lfd = LfD()
        self.establish_ros_connections()

    def establish_ros_connections(self):
        self._record_action_server = actionlib.SimpleActionServer(
            'lfdRecord', LfdRecordAction, self.execute_record, auto_start=False
        )
        self._record_action_server.start()
        self._execute_sequence_action_server = actionlib.SimpleActionServer(
            'lfdExecuteSequence', LfdExecuteSequenceAction, self.execute_execute_sequence, auto_start=False
        )
        self._execute_sequence_action_server.start()
        self._execute_skill_server = actionlib.SimpleActionServer(
            'lfdExecuteSkill', LfdExecuteSkillAction, self.execute_skill, auto_start=False
        )
        self._execute_skill_server.start()
        self._execute_skill_sequence_server = actionlib.SimpleActionServer(
            'lfdExecuteSkillSequence', LfdExecuteSkillSequenceAction, self.execute_skill_sequence, auto_start=False
        )
        self._execute_skill_sequence_server.start()
        self._home_action_server = actionlib.SimpleActionServer(
            'lfdHome', LfdHomeAction, self.execute_home, auto_start=False
        )
        self._home_action_server.start()
        rospy.Service("list_trajectories", ListTrajectories, self.handle_list_trajectories)
        rospy.Service("list_templates", ListTemplates, self.handle_list_templates)
        rospy.Service("list_skills", ListSkills, self.handle_list_skills)
        rospy.wait_for_service('iterative_sift_localizer')
        self.iterative_localizer = rospy.ServiceProxy('iterative_sift_localizer', IterativeRegistrationLocalizer)
        self._get_closest_template = rospy.ServiceProxy('multi_sift_localization', MultiSiftRegistrationLocalizer)

        self._open_gripper_action_server = actionlib.SimpleActionServer(
            'abort_gripper', AbortGripperAction, self.execute_open_gripper, auto_start=False
        )
        self._open_gripper_action_server.start()
        self._execute_sequence_action_client = actionlib.SimpleActionClient('lfdExecuteSequence', LfdExecuteSequenceAction)
        self._solve_slider_client = actionlib.SimpleActionClient('solveSlider', SolveSliderAction)
        self._debug_publisher = rospy.Publisher('/debug', String, queue_size=10)
        self._gripper_width_subscriber = rospy.Subscriber('/gripper_config', Float32MultiArray, self.gripper_width_callback)
        self._exposure_client = dynamic_reconfigure.client.Client("/camera/stereo_module", timeout=10)
        self._detection_params = {'exposure': 9000, 'enable_auto_exposure': False}
        self._running_params = {'enable_auto_exposure': True}

    def gripper_width_callback(self, msg: Float32MultiArray):
        self._lfd.grip_open_width = msg.data[0]
        self._lfd.robot.grasp_command.goal.speed = msg.data[1]
        self._lfd.robot.grasp_command.goal.force = msg.data[2]

    def execute_skill(self, goal: LfdExecuteSkillGoal):
        result = LfdExecuteSkillResult()
        if goal.localize_box:
            if goal.template_name == '':
                available_templates = self._lfd.list_all_available_templates()
                multi_sift_request = MultiSiftRegistrationLocalizerRequest()
                multi_sift_request.template_folder_names = available_templates
                response: MultiSiftRegistrationLocalizerResponse = self._get_closest_template(multi_sift_request)
                goal.template_name = response.closest_template_name
            request = IterativeRegistrationLocalizerRequest()
            request.steps.data = NB_ITERATIVE_STEPS
            request.template_file_name.data = goal.template_name
            resp: IterativeRegistrationLocalizerResponse = self.iterative_localizer(request)
            self._lfd.localization_transform = pose_2_transformation(resp.pose)
        skill_file = rospkg.RosPack().get_path('platonics_dataset') + '/trajectories/' + goal.template_name + '/' + goal.skill_name + ".yaml"
        skill_config = yaml.safe_load(open(skill_file))
        for action, action_config in skill_config.items():
            if action_config['action_name'] == 'lfdExecuteSequence':
                goal_sequence = LfdExecuteSequenceGoal()
                goal_sequence.skill_names = action_config['skill_names']
                goal_sequence.template_name = goal.template_name
                goal_sequence.speed_factor = goal.speed_factor
                self._execute_sequence_action_client.send_goal(goal_sequence)
                while not self._execute_sequence_action_client.get_result():
                    if self._execute_skill_server.is_preempt_requested():
                        self._execute_sequence_action_client.cancel_all_goals()
                        self._execute_skill_server.set_preempted()
                        result.success = False
                        self._execute_skill_server.set_succeeded(result)
                        return
                    self._lfd.rate.sleep()
            if action_config['action_name'] == 'solveSlider':
                goal_skill = SolveSliderGoal()
                goal_skill.task_stage = action_config['task_stage']
                self._solve_slider_client.send_goal(goal_skill)
                while not self._solve_slider_client.get_result():
                    if self._execute_skill_server.is_preempt_requested():
                        self._solve_slider_client.cancel_all_goals()
                        self._execute_skill_server.set_preempted()
                        result.success = False
                        self._execute_skill_server.set_succeeded(result)
                        return
                    self._lfd.rate.sleep()
        result.success = True
        self._execute_skill_server.set_succeeded(result)




    def handle_list_templates(self, request: ListTemplatesRequest):
        response = ListTemplatesResponse()
        response.templates = self._lfd.list_all_available_templates()
        return response


    def handle_list_trajectories(self, request: ListTrajectoriesRequest):
        response = ListTrajectoriesResponse()
        response.trajectories = self._lfd.list_all_available_trajectories(request.template_name)
        return response

    def handle_list_skills(self, request: ListSkillsRequest):
        response = ListSkillsResponse()
        response.skills = self._lfd.list_all_available_skills(request.template_name)
        return response

    def execute_open_gripper(self, goal: AbortGripperGoal):
        self._lfd.robot.stop_gripper()
        if goal.open:
            self._lfd.robot.home_gripper()
            self._lfd.robot.move_gripper(self._lfd.grip_open_width)
        result = AbortGripperResult()
        result.success = True
        self._open_gripper_action_server.set_succeeded(result)

    def execute_skill_sequence(self, goal: LfdExecuteSkillSequenceGoal):
        self._exposure_client.update_configuration(self._running_params)
        feedback = LfdExecuteSkillSequenceFeedback()
        result = LfdExecuteSkillSequenceResult()
        if goal.localize_box:
            if goal.template_name == '':
                available_templates = self._lfd.list_all_available_templates()
                multi_sift_request = MultiSiftRegistrationLocalizerRequest()
                multi_sift_request.template_folder_names = available_templates
                response: MultiSiftRegistrationLocalizerResponse = self._get_closest_template(multi_sift_request)
                goal.template_name = response.closest_template_name

            request = IterativeRegistrationLocalizerRequest()
            request.steps.data = NB_ITERATIVE_STEPS
            request.template_file_name.data = goal.template_name
            resp: IterativeRegistrationLocalizerResponse = self.iterative_localizer(request)
            self._lfd.localization_transform = pose_2_transformation(resp.pose)
        available_trajectories = self._lfd.list_all_available_trajectories(goal.template_name)
        available_skills = self._lfd.list_all_available_skills(goal.template_name)
        aborting = False
        for skill_name in goal.skill_names:
            if skill_name in available_skills:
                self.debug(f"Executing {skill_name} as skill")
                skill_file = rospkg.RosPack().get_path('platonics_dataset') + '/trajectories/' + goal.template_name + '/' + skill_name + ".yaml"
                skill_config = yaml.safe_load(open(skill_file))
                for action, action_config in skill_config.items():
                    if action_config['action_name'] == 'lfdExecuteSequence':
                        goal_sequence = LfdExecuteSequenceGoal()
                        goal_sequence.skill_names = action_config['skill_names']
                        goal_sequence.template_name = goal.template_name
                        goal_sequence.speed_factor = goal.speed_factor
                        self._execute_sequence_action_client.send_goal(goal_sequence)
                        while not self._execute_sequence_action_client.get_result():
                            if self._execute_skill_server.is_preempt_requested():
                                self._execute_sequence_action_client.cancel_all_goals()
                                self._execute_skill_server.set_preempted()
                                result.success = False
                                self._execute_skill_server.set_succeeded(result)
                                return
                            #feedback = self._execute_sequence_action_client.get_feedback()
                            self._execute_skill_sequence_server.publish_feedback(feedback)
                            self._lfd.rate.sleep()
                    if action_config['action_name'] == 'solveSlider':
                        goal_skill = SolveSliderGoal()
                        goal_skill.task_stage = action_config['task_stage']
                        self._solve_slider_client.send_goal(goal_skill)
                        while not self._solve_slider_client.get_result():
                            if self._execute_skill_server.is_preempt_requested():
                                self._solve_slider_client.cancel_all_goals()
                                self._execute_skill_server.set_preempted()
                                result.success = False
                                self._execute_skill_server.set_succeeded(result)
                                return
                            self._lfd.rate.sleep()
            elif skill_name in available_trajectories:
                self.debug(f"Executing {skill_name} as trajectory")
                if aborting:
                    self._lfd.execute_end()
                    break
                feedback.skill_name = skill_name
                self._lfd.buttons.start_listening()
                self._lfd.load(skill_name, goal.template_name)
                self._lfd.execute_start(goal.speed_factor)
                retry_insertion_flag = 0
                while not(self._lfd.buttons.end):
                    end_execute = self._lfd.execute_step(retry_insertion_flag)
                    if self._execute_skill_sequence_server.is_preempt_requested():
                        result.success = False
                        end_execute = True
                        aborting = True
                        self._execute_sequence_action_server.set_preempted(result)
                    if end_execute:
                        break
                    feedback.camera_feedback = self._lfd.data['recorded_img_feedback_flag'][self._lfd.time_index]
                    feedback.spiraling = self._lfd.data['recorded_spiral_flag'][self._lfd.time_index]
                    feedback.gripper = self._lfd.gripper_state
                    feedback.waypoint_index = self._lfd.time_index
                    self._execute_skill_sequence_server.publish_feedback(feedback)
                self._lfd.execute_end()
                self._lfd.save(skill_name, goal.template_name)
        if result.success:
            self._execute_sequence_action_server.set_succeeded(result)
        if aborting:
            self._lfd.abort()


    def execute_execute_sequence(self, goal: LfdExecuteSequenceGoal):
        self._exposure_client.update_configuration(self._running_params)
        feedback = LfdExecuteSequenceFeedback()
        result = LfdExecuteSequenceResult()
        result.success = True
        if goal.localize_box:
            if goal.template_name == '':
                available_templates = self._lfd.list_all_available_templates()
                multi_sift_request = MultiSiftRegistrationLocalizerRequest()
                multi_sift_request.template_folder_names = available_templates
                response: MultiSiftRegistrationLocalizerResponse = self._get_closest_template(multi_sift_request)
                goal.template_name = response.closest_template_name

            request = IterativeRegistrationLocalizerRequest()
            request.steps.data = NB_ITERATIVE_STEPS
            request.template_file_name.data = goal.template_name
            resp: IterativeRegistrationLocalizerResponse = self.iterative_localizer(request)
            self._lfd.localization_transform = pose_2_transformation(resp.pose)
        template_name = goal.template_name
        aborting = False
        for skill_name in goal.skill_names:
            if aborting:
                self._lfd.execute_end()
                break
            feedback.skill_name = skill_name
            self._lfd.buttons.start_listening()
            self._lfd.load(skill_name, template_name)
            self._lfd.execute_start(goal.speed_factor)
            retry_insertion_flag = 0
            while not(self._lfd.buttons.end):
                end_execute = self._lfd.execute_step(retry_insertion_flag)
                if self._execute_sequence_action_server.is_preempt_requested():
                    result.success = False
                    end_execute = True
                    aborting = True
                    self._execute_sequence_action_server.set_preempted(result)
                if end_execute:
                    break
                feedback.camera_feedback = self._lfd.data['recorded_img_feedback_flag'][self._lfd.time_index]
                feedback.spiraling = self._lfd.data['recorded_spiral_flag'][self._lfd.time_index]
                feedback.gripper = self._lfd.gripper_state
                feedback.waypoint_index = self._lfd.time_index
                self._execute_sequence_action_server.publish_feedback(feedback)
            self._lfd.execute_end()
            self._lfd.save(skill_name, goal.template_name)
        if result.success:
            self._execute_sequence_action_server.set_succeeded(result)
        if aborting:
            self._lfd.abort()

    def debug(self, text: str):
        msg = String(data=text)
        self._debug_publisher.publish(msg)


    def execute_record(self, goal: LfdRecordGoal):
        self._exposure_client.update_configuration(self._running_params)
        result = LfdRecordResult()
        if not self._lfd.init_record(0.005, goal.template_name):
            result.success = False
            self.debug(f"Template {goal.template_name} not found")
            self._record_action_server.set_succeeded(result)
            return
        feedback = LfdRecordFeedback()
        while not self._lfd.buttons.end:
            self._lfd.record_step()
            feedback.trajectory_length = len(self._lfd.recorded_pose)
            feedback.camera_feedback = self._lfd.buttons.img_feedback_flag
            feedback.paused = self._lfd.buttons.pause
            feedback.spiraling = self._lfd.buttons.spiral_flag
            feedback.stiffness = self._lfd.buttons.stiff_rotation
            feedback.gripper = self._lfd.gripper_state
            self._record_action_server.publish_feedback(feedback)
        self._lfd.end_record()
        self._lfd.save(goal.skill_name, goal.template_name)
        result.success = True
        self._record_action_server.set_succeeded(result)

    def execute_home(self, goal: LfdHomeGoal):
        self._lfd.robot.home(
            height=goal.height,
            front_offset=goal.front,
            side_offset=goal.side,
        )
        new_goal_pose = self.new_ee_pose_camera_plane(self._lfd.robot.goal_pose)
        self._lfd.robot.goal_pub.publish(new_goal_pose)
        self._lfd.robot.offset_compensator(10)
        result = LfdHomeResult()
        result.success = True
        self._home_action_server.set_succeeded(result)

    def run(self):
        while not rospy.is_shutdown():
            self._lfd.rate.sleep()

    def new_ee_pose_camera_plane(self, curr_pose):
        orientation = rospy.get_param("/camera_transform/rotation", {})
        curr_ori_quaternion = np.quaternion(self._lfd.robot.curr_ori[0], self._lfd.robot.curr_ori[1], self._lfd.robot.curr_ori[2], self._lfd.robot.curr_ori[3])
        hand_optical_quaternion = np.quaternion(orientation['w'], orientation['x'], orientation['y'], orientation['z'])
        world_optical_quaternion_desired = np.quaternion(0.0, np.sqrt(0.5), -np.sqrt(0.5), 0.0)
        new_goal_quaternion = world_optical_quaternion_desired * (curr_ori_quaternion * hand_optical_quaternion).inverse() * curr_ori_quaternion
        new_goal_pose = PoseStamped()
        new_goal_pose.pose.position.x = curr_pose.pose.position.x
        new_goal_pose.pose.position.y = curr_pose.pose.position.y
        new_goal_pose.pose.position.z = curr_pose.pose.position.z
        new_goal_pose.pose.orientation.w = new_goal_quaternion.w
        new_goal_pose.pose.orientation.x = new_goal_quaternion.x
        new_goal_pose.pose.orientation.y = new_goal_quaternion.y
        new_goal_pose.pose.orientation.z = new_goal_quaternion.z
        return new_goal_pose

if __name__ == "__main__":
    node = LfDServer()
    try:
        node.run()
    except rospy.ROSInterruptException:
        pass

